// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Chat –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å dependency injection
class Chat {
    constructor(eventBus, apiService, userService) {
        console.log(`%cüîç DEBUG: [Chat.constructor]}`, 'background: #222; color: #bada55');
        this.eventBus = eventBus;
        this.apiService = apiService;
        this.userService = userService;
        this.container = null;
        this.dataLoader = new ChatDataLoader(apiService);
        this.renderer = new ChatRenderer();
        this.messageSender = new MessageSender(apiService);
        this.chatData = null;
        this.messages = [];
        this.isInitialized = false;
        this.unsubscribeFromUserUpdates = null;
        this.currentUserId = null; 
    }

    async init(container, chatData) {
        console.log(`%cüîç DEBUG: [Chat.init]}`, 'background: #222; color: #bada55');
        this.container = container;
        this.chatData = chatData;
        
        this.removeEventListeners();

        if (!chatData) {
            console.error('–î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            const currentUser = await this.apiService.getCurrentUser();
            this.currentUserId = currentUser.id;
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –≤ renderer
            this.renderer.setCurrentUserId(this.currentUserId);
        } catch (error) {
            console.error('Failed to get current user:', error);
        }

        this.setChatAvatar();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç–∞ —á–µ—Ä–µ–∑ UserService
        if (chatData.userId) {
            await this.userService.loadUsers([chatData.userId]);
        }

        await this.loadMessages();

        try {
            if (chatData.id && chatData.id !== 'undefined') {
                await this.apiService.markChatAsRead(chatData.id);
            }
        } catch (error) {
            console.warn('Failed to mark chat as read:', error);
        }

        this.render();
        this.setupEvents();
        this.subscribeToUserUpdates();
    }

    addNewMessage(messageData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if (this.messages.find(msg => msg.id === messageData.id)) {
            return;
        }
        
        this.messages.push(messageData);
        this.messages.sort((a, b) => new Date(a.time) - new Date(b.time));
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –≤–µ—Å—å —á–∞—Ç
        this.renderNewMessage(messageData);
        this.scrollToBottom();
    }

    renderNewMessage(messageData) {
        console.log(`%cüîç DEBUG: [Chat.renderNewMessage]}`, 'background: #222; color: #bada55');
        const messagesContainer = this.container.querySelector('.messages-list');
        const messageElement = this.createMessageElement(messageData);
        messagesContainer.appendChild(messageElement);
    }

    createMessageElement(messageData) {
        const div = document.createElement('div');
        div.className = `message ${messageData.senderId === this.currentUserId ? 'outgoing' : 'incoming'}`;
        div.innerHTML = `
            <div class="message-content">
                <div class="message-text">${messageData.text}</div>
                <div class="message-time">${this.formatTime(messageData.time)}</div>
            </div>
        `;
        return div;
    }

    formatTime(date) {
        return new Date(date).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    scrollToBottom() {
        setTimeout(() => {
            const container = this.container.querySelector('.messages-list');
            if (container) {
                container.scrollTop = container.scrollHeight;
            }
        }, 10);
    }

    // –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –∑–≤—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
    playNotificationSound() {
        try {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = 800;
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.5);
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–≤—É–∫–∞
        }
    }
    
    setChatAvatar() {
        const avatar = this.container.querySelector('.chat-user-avatar');
        if (avatar && this.chatData) {
            avatar.src = this.chatData.avatarUrl || 'assets/placeholder.png';
        }
    }

    async loadMessages() {
        try {
            this.messages = await this.dataLoader.getMessages(this.chatData.id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            this.messages = [];
        }
    }

    render() {
        console.log(`%cüîç DEBUG: [Chat.render]}`, 'background: #222; color: #bada55');
        this.updateChatHeader();
        this.renderer.renderMessages(this.messages, this.container);
        this.scrollToBottom();
    }

    updateChatHeader() {
        const avatar = this.container.querySelector('.chat-user-avatar');
        const name = this.container.querySelector('.chat-user-name');
        const status = this.container.querySelector('.chat-user-status');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
        if (avatar && this.chatData) {
            avatar.src = this.chatData.avatarUrl || 'assets/placeholder.png';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è - –±–µ—Ä–µ–º –∏–∑ chatData
        if (name) {
            name.textContent = this.chatData.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ UserService –µ—Å–ª–∏ userId –µ—Å—Ç—å
        if (status && this.chatData.userId) {
            try {
                const user = this.userService.getUser(this.chatData.userId);
                const isOnline = this.userService.getUserStatus(this.chatData.userId);
                
                if (isOnline) {
                    status.textContent = '–í —Å–µ—Ç–∏';
                    status.className = 'chat-user-status online';
                } else if (user && user.lastSeen) {
                    status.textContent = this.formatLastSeen(user.lastSeen);
                    status.className = 'chat-user-status offline';
                } else {
                    status.textContent = '–ë—ã–ª –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ';
                    status.className = 'chat-user-status offline';
                }
            } catch (error) {
                // –ï—Å–ª–∏ UserService –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                status.textContent = '–û—Ñ–ª–∞–π–Ω';
                status.className = 'chat-user-status offline';
            }
        }
    }

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscribeToUserUpdates() {
        this.unsubscribeFromUserUpdates = this.userService.subscribe((event, data) => {
            if (event === 'user-status-changed' && data.userId === this.chatData.userId) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –≤ —à–∞–ø–∫–µ
                this.updateChatHeader();
            }
        });
    }

    formatLastSeen(lastSeen) {
        const now = new Date();
        const diff = now - new Date(lastSeen);
        const minutes = Math.floor(diff / (1000 * 60));
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));

        if (minutes < 1) {
            return '–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª –≤ —Å–µ—Ç–∏';
        } else if (minutes < 60) {
            return `–ë—ã–ª –≤ —Å–µ—Ç–∏ ${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        } else if (hours < 24) {
            return `–ë—ã–ª –≤ —Å–µ—Ç–∏ ${hours} —á –Ω–∞–∑–∞–¥`;
        } else if (days === 1) {
            return '–ë—ã–ª –≤ —Å–µ—Ç–∏ –≤—á–µ—Ä–∞';
        } else {
            return `–ë—ã–ª –≤ —Å–µ—Ç–∏ ${days} –¥–Ω –Ω–∞–∑–∞–¥`;
        }
    }

    setupEvents() {
        this.removeEventListeners();
    
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userAvatar = this.container.querySelector('.chat-user-avatar');
        const userName = this.container.querySelector('.chat-user-name');
        
        [userAvatar, userName].forEach(element => {
            if (element) {
                element.style.cursor = 'pointer';
                element.addEventListener('click', () => {
                    this.eventBus.emit('user-profile-requested', {
                        userId: this.chatData.userId
                    });
                });
            }
        });
    
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        const sendButton = this.container.querySelector('#send-button');
        const messageInput = this.container.querySelector('#message-input');
        
        // –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.sendMessageHandler = () => {
            this.sendMessage();
        };
    
        this.keyPressHandler = (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        };
        
        this.inputHandler = (e) => {
            const text = e.target.value.trim();
            if (sendButton) {
                sendButton.disabled = text.length === 0;
            }
        };
        
        if (sendButton) {
            sendButton.addEventListener('click', this.sendMessageHandler);
        }
        
        if (messageInput) {
            messageInput.addEventListener('keydown', this.keyPressHandler);
            messageInput.addEventListener('input', this.inputHandler);
            
            // // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            // const initialText = messageInput.value.trim();
            // if (sendButton) {
            //     sendButton.disabled = initialText.length === 0;
            // }
        }
        
        this.isInitialized = true;
    }

    async sendMessage() {
        console.log(`sendMessage: isSending = ${this.isSending}`, 'background: #222; color: #bada55');

        if (this.isSending) {
            console.log('Message sending already in progress, skipping');
            return;
        }

        this.isSending = true;

        const messageInput = this.container.querySelector('#message-input');
        const sendButton = this.container.querySelector('#send-button');
        const text = messageInput.value.trim();
    
        if (!text ) {
            this.isSending = false;
            return;
        } 

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        messageInput.disabled = true;
        sendButton.disabled = true;
        sendButton.textContent = '...';

        try {
            let targetChatId = this.chatData.id;
            
            // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç - —Å–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π
            if (this.chatData.isTemporary) {
                targetChatId = await this.createPermanentChat(text);
            }
            
            const newMessage = await this.messageSender.send(targetChatId, text);
            this.messages.push(newMessage);
            this.render();
            messageInput.value = '';
            
            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
            // this.eventBus.emit('message-sent', {
            //     chatId: targetChatId,
            //     message: newMessage
            // });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            this.showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.isSending = false;
            messageInput.disabled = false;
            sendButton.disabled = false;
            sendButton.textContent = '‚û§';
            messageInput.focus();
        }
    }

    async createPermanentChat(firstMessage) {
        try {
            // –°–æ–∑–¥–∞–µ–º —á–∞—Ç —á–µ—Ä–µ–∑ API
            const newChat = await this.apiService.createChat({
                userId: this.chatData.userId,
                type: 'private',
                name: this.chatData.name,
                avatarUrl: this.chatData.avatarUrl
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            this.chatData = {
                ...newChat,
                isTemporary: false
            };
            
            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞
            this.eventBus.emit('chat-created', { chat: newChat });
            
            return newChat.id;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
            throw error;
        }
    }

    showErrorMessage(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'chat-error-notification';
        errorDiv.textContent = message;
        errorDiv.style.cssText = `
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background: #dc3545;
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            z-index: 1000;
            font-size: 14px;
        `;
        
        this.container.style.position = 'relative';
        this.container.appendChild(errorDiv);
        
        setTimeout(() => {
            errorDiv.remove();
        }, 3000);
    }

    scrollToBottom() {
        const messagesContainer = this.container.querySelector('.messages-container');
        if (messagesContainer) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    }

    removeEventListeners() {
        const sendButton = this.container?.querySelector('#send-button');
        const messageInput = this.container?.querySelector('#message-input');
        
        if (sendButton && this.sendMessageHandler) {
            sendButton.removeEventListener('click', this.sendMessageHandler);
        }
        
        if (messageInput) {
            if (this.keyPressHandler) {
                messageInput.removeEventListener('keydown', this.keyPressHandler);
            }
            if (this.inputHandler) {
                messageInput.removeEventListener('input', this.inputHandler);
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏ –∏–º–µ–Ω–∏
        const userAvatar = this.container?.querySelector('.chat-user-avatar');
        const userName = this.container?.querySelector('.chat-user-name');
        
        [userAvatar, userName].forEach(element => {
            if (element) {
                element.style.cursor = '';
                // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                const newElement = element.cloneNode(true);
                element.parentNode.replaceChild(newElement, element);
            }
        });
    }
    
    destroy() {
        this.removeEventListeners();
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (this.unsubscribeFromUserUpdates) {
            this.unsubscribeFromUserUpdates();
        }
    }
}