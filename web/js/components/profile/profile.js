// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Profile –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å dependency injection
class Profile {
    constructor(eventBus, apiService, userService) {
        this.eventBus = eventBus;
        this.apiService = apiService;
        this.userService = userService;
        this.container = null;
        this.dataLoader = new ProfileDataLoader(apiService);
        this.renderer = new ProfileRenderer(apiService);
        this.userData = null;
        this.isOwnProfile = true;
        this.contactsManager = new ContactsManager(apiService, eventBus);
        this.unsubscribeFromUserUpdates = null;
        
        // Debugging
        this.instanceId = Date.now() + Math.random();
        console.log(`Profile instance created: ${this.instanceId}`);
    }

    async init(container, data) {
        console.log(`[${this.instanceId}] Profile: init()`);
        this.container = container;

        const userId = data?.userId;
        this.isOwnProfile = !userId;
        this.previousComponent = data?.from || 'chats-list'; 
        
        await this.loadUserData(userId);

        this.setProfileAvatar()

        this.render();
        this.setupEvents();
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!this.isOwnProfile) {
            this.subscribeToUserUpdates();
        }
    }
    
    setProfileAvatar() {
        const avatar = this.container.querySelector('.profile-avatar');
        if (avatar && this.userData) {
            avatar.src = this.userData.avatarUrl || 'assets/placeholder.png';
        }
    }

    async loadUserData(userId = null) {
        try {
            if (userId) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                this.userData = await this.dataLoader.getUserProfile(userId);
                // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –≤ UserService –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                await this.userService.loadUsers([userId]);
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
                this.userData = await this.dataLoader.getCurrentUserProfile();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            this.showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
        }
    }

    async render() {
        console.log(`[${this.instanceId}] Profile: render() isOwn=${this.isOwnProfile}`);
        
        this.renderer.render(this.userData, this.container, this.isOwnProfile);
        
        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –î–õ–Ø –ö–ù–û–ü–û–ö –ü–û–°–õ–ï –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
        if (!this.isOwnProfile) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
            this.renderer.setMessageClickHandler((e) => this.openChatWithUser());
            this.renderer.setContactActionHandler((e) => this.handleContactAction(e));
        }
        
        if (this.isOwnProfile) {
            await this.loadAndRenderContacts();
        }
        
        this.updateUserStatus();
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    updateUserStatus() {
        if (!this.isOwnProfile && this.userData) {
            const status = this.container.querySelector('.status');
            if (status) {
                const isOnline = this.userService.getUserStatus(this.userData.id);
                const user = this.userService.getUser(this.userData.id);
                
                if (isOnline) {
                    status.textContent = '–í —Å–µ—Ç–∏';
                    status.className = 'status online';
                } else if (user && user.lastSeen) {
                    status.textContent = this.formatLastSeen(user.lastSeen);
                    status.className = 'status offline';
                } else {
                    status.textContent = '–ë—ã–ª –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ';
                    status.className = 'status offline';
                }
            }
        }
    }

    formatLastSeen(lastSeen) {
        const now = new Date();
        const diff = now - new Date(lastSeen);
        const minutes = Math.floor(diff / (1000 * 60));
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));

        if (minutes < 1) {
            return '—Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª –≤ —Å–µ—Ç–∏';
        } else if (minutes < 60) {
            return `–±—ã–ª –≤ —Å–µ—Ç–∏ ${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        } else if (hours < 24) {
            return `–±—ã–ª –≤ —Å–µ—Ç–∏ ${hours} —á –Ω–∞–∑–∞–¥`;
        } else if (days === 1) {
            return '–±—ã–ª –≤ —Å–µ—Ç–∏ –≤—á–µ—Ä–∞';
        } else {
            return `–±—ã–ª –≤ —Å–µ—Ç–∏ ${days} –¥–Ω –Ω–∞–∑–∞–¥`;
        }
    }

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscribeToUserUpdates() {
        this.unsubscribeFromUserUpdates = this.userService.subscribe((event, data) => {
            if (event === 'user-status-changed' && data.userId === this.userData.id) {
                this.updateUserStatus();
            }
        });
    }

    async loadAndRenderContacts() {
        const contactsSection = this.container.querySelector('.contacts-list-section');
        if (contactsSection) {
            contactsSection.style.display = 'block';
            await this.contactsManager.render(this.container);
        }
    }

    setupEvents() {
        console.log(`[${this.instanceId}] Profile: setupEvents()`);
        
        this.boundHandlers = {
            backClick: (e) => {
                console.log('Profile: back button clicked');
                e.preventDefault(); // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                e.stopPropagation();
                window.app.leftPanel.goBack();
            },
            
            editClick: (e) => {
                console.log('Profile: edit button clicked');
                e.preventDefault();
                e.stopPropagation();
                window.app.leftPanel.loadComponent('profile-editor');
            }
        };
    
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        const backButton = this.container.querySelector('.back-button');
        if (backButton) {
            backButton.addEventListener('click', this.boundHandlers.backClick);
        }
    
        if (this.isOwnProfile) {
            const editButton = this.container.querySelector('.edit-profile-button');
            if (editButton) {
                editButton.addEventListener('click', this.boundHandlers.editClick);
            }
        }
        
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –∑–¥–µ—Å—å - –æ–Ω–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ renderer.addUserActions()
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ handleContactAction –≤ Profile
    async handleContactAction(event) {
        // –í–ê–ñ–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        event.preventDefault();
        event.stopPropagation();
        
        const button = event.target;
        if (!button || button.disabled) return;
        
        const isRemove = button.classList.contains('remove-contact');
        const originalText = button.textContent;
        const userId = this.userData.id;
        
        console.log(`${isRemove ? 'Removing' : 'Adding'} contact ${userId}`);
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        button.disabled = true;
        button.textContent = isRemove ? '–£–¥–∞–ª—è–µ–º...' : '–î–æ–±–∞–≤–ª—è–µ–º...';
        
        try {
            if (isRemove) {
                await this.apiService.removeContact(userId);
                console.log(`Successfully removed contact ${userId}`);
            } else {
                await this.apiService.addContact(userId);
                console.log(`Successfully added contact ${userId}`);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ —Ä–µ–Ω–¥–µ—Ä–µ—Ä (–æ–Ω —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å)
            await this.renderer.updateContactButton(this.container, userId);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            this.eventBus.emit('contacts-updated');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            this.showSuccessMessage(isRemove ? 
                '–ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω' : 
                '–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω'
            );
            
        } catch (error) {
            console.error('Error handling contact action:', error);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            button.disabled = false;
            button.textContent = originalText;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            this.showErrorMessage(isRemove ? 
                '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' : 
                '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'
            );
        }
    }

    // –í –º–µ—Ç–æ–¥–µ openChatWithUser –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤:
    openChatWithUser(e) {
        console.log('%cüéØ openChatWithUser called', 'background: green; color: white;');
        
        if (e) {
            console.log('Event details:', e);
            e.preventDefault();
            e.stopPropagation();
            console.log('Event prevented and stopped');
        }
        
        console.log('Profile: Opening chat with user', this.userData.id);
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
        this.eventBus.emit('open-chat-with-user', {
            userId: this.userData.id,
            userName: this.userData.name,
            userAvatar: this.userData.avatarUrl
        });

        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º goBack —Å—Ä–∞–∑—É - –ø—É—Å—Ç—å —á–∞—Ç —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
        console.log('%cüéØ Chat opening initiated', 'background: green; color: white;');
    }

    showErrorMessage(message) {
        this.showNotification(message, 'error');
    }

    showSuccessMessage(message) {
        this.showNotification(message, 'success');
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `profile-notification ${type}`;
        notification.textContent = message;
        
        const colors = {
            error: '#dc3545',
            success: '#28a745',
            info: '#007bff'
        };
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${colors[type]};
            color: white;
            padding: 12px 16px;
            border-radius: 8px;
            z-index: 1000;
            font-size: 14px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    destroy() {
        console.log(`[${this.instanceId}] Profile: destroy()`);
        
        if (this.boundHandlers) {
            const backButton = this.container?.querySelector('.back-button');
            if (backButton && this.boundHandlers.backClick) {
                backButton.removeEventListener('click', this.boundHandlers.backClick);
            }

            const editButton = this.container?.querySelector('.edit-profile-button');
            if (editButton && this.boundHandlers.editClick) {
                editButton.removeEventListener('click', this.boundHandlers.editClick);
            }

            const messageButton = this.container?.querySelector('.message-user-button');
            if (messageButton && this.boundHandlers.messageClick) {
                messageButton.removeEventListener('click', this.boundHandlers.messageClick);
            }

            const contactButton = this.container?.querySelector('#contact-action-button');
            if (contactButton && this.boundHandlers.contactActionClick) {
                contactButton.removeEventListener('click', this.boundHandlers.contactActionClick);
            }
        }
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (this.unsubscribeFromUserUpdates) {
            this.unsubscribeFromUserUpdates();
        }
        
        this.boundHandlers = null;
    }

    showErrorMessage(message) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = 'profile-notification error';
        notification.textContent = message;
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #dc3545;
            color: white;
            padding: 12px 16px;
            border-radius: 8px;
            z-index: 1000;
            font-size: 14px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            transform: translateX(100%);
            transition: transform 0.3s ease;
        `;
        
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 10);
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, 4000);
    }
}