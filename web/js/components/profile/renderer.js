// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ProfileRenderer —Å API
class ProfileRenderer {
    constructor(apiService) {
        this.apiService = apiService;
    }

    render(userData, container, isOwnProfile) {
        this.fillMainSection(userData, container);
        this.fillBiographySection(userData, container);
        this.fillContactInfoSection(userData, container);
        
        if (isOwnProfile) {
            this.addEditButton(container);
            this.addLogoutButton(container); 
        } else {
            this.addUserActions(userData, container);
        }
    }

    addEditButton(container) {
        const headerActions = container.querySelector('.header-actions');
        if (headerActions) {
            const editButton = document.createElement('button');
            editButton.className = 'edit-profile-button';
            editButton.innerHTML = '‚úèÔ∏è';
            editButton.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å';
            headerActions.appendChild(editButton);
        }
    }

    async addUserActions(userData, container) {
        const actionsSection = container.querySelector('.profile-actions');
        if (!actionsSection) return;

        actionsSection.innerHTML = `
            <button class="message-user-button">
                –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            </button>
            <button class="contact-action-button" id="contact-action-button">
                –ó–∞–≥—Ä—É–∑–∫–∞...
            </button>
        `;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        await this.updateContactButton(container, userData.id);
        
        actionsSection.style.display = 'block';
    }

    addLogoutButton(container) {
        const headerActions = container.querySelector('.header-actions');
        if (headerActions) {
            const logoutButton = document.createElement('button');
            logoutButton.className = 'logout-button';
            logoutButton.innerHTML = 'üö™';
            logoutButton.title = '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞';
            
            logoutButton.addEventListener('click', () => {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º AuthGuard –¥–ª—è –≤—ã—Ö–æ–¥–∞
                window.authGuard.logout();
            });
            
            headerActions.appendChild(logoutButton);
        }
    }
  
    renderActionButtons(container, isOwnProfile) {
        const actionsContainer = container.querySelector('.profile-actions');
    
        if (isOwnProfile) {
            if (actionsContainer) {
                actionsContainer.style.display = 'none';
            }
            
            const headerActions = container.querySelector('.header-actions');
            if (headerActions) {
                headerActions.innerHTML = `
                    <button class="edit-profile-button" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å">‚öôÔ∏è</button>
                `;
            }
        } else {
            if (actionsContainer) {
                actionsContainer.style.display = 'block';
                actionsContainer.innerHTML = `
                    <button class="message-user-button">–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</button>
                    <button class="contact-action-button" id="contact-action-button">
                        –ü—Ä–æ–≤–µ—Ä—è–µ–º...
                    </button>
                `;
            }

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
            this.updateContactButton(container, this.currentUserId);
        }
    }

    fillMainSection(userData, container) {
        const avatar = container.querySelector('.profile-avatar');
        const name = container.querySelector('.profile-name');
        const username = container.querySelector('.username');
        const status = container.querySelector('.status');
        
        if (avatar) avatar.src = userData.avatarUrl || 'assets/placeholder.png';
        if (name) name.textContent = userData.name;
        if (username) username.textContent = `@${userData.username}`;
        if (status) status.textContent = userData.isOnline ? '–í —Å–µ—Ç–∏' : '–ë—ã–ª –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ';
    }

    fillBiographySection(userData, container) {
        const biographySection = container.querySelector('.biography-section');
        const biography = container.querySelector('.profile-biography');
        
        if (userData.bio && userData.bio.trim()) {
            if (biography) biography.textContent = userData.bio;
            if (biographySection) biographySection.style.display = 'block';
        } else {
            if (biographySection) biographySection.style.display = 'none';
        }
    }

    fillContactInfoSection(userData, container) {
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
    }


    async updateContactButton(container, userId) {
        const contactButton = container.querySelector('#contact-action-button');
        if (!contactButton) return;

        try {
            const isContact = await this.apiService.isContact(userId);
            
            contactButton.disabled = false;
            
            if (isContact) {
                contactButton.textContent = '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤';
                contactButton.className = 'contact-action-button remove-contact';
            } else {
                contactButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã';
                contactButton.className = 'contact-action-button add-contact';
            }
        } catch (error) {
            console.error('Error checking contact status:', error);
            contactButton.textContent = '–û—à–∏–±–∫–∞';
            contactButton.disabled = true;
        }
    }

    toggleContactsVisibility(container, isOwnProfile) {
        const contactsSection = container.querySelector('.contacts-list-section');
        if (contactsSection) {
            contactsSection.style.display = isOwnProfile ? 'block' : 'none';
        }
    }

    formatLastSeen(lastSeen) {
        if (!lastSeen) return '–±—ã–ª –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ';
        
        const now = new Date();
        const diff = now - new Date(lastSeen);
        const minutes = Math.floor(diff / (1000 * 60));
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));

        if (minutes < 60) {
            return `–±—ã–ª ${minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`;
        } else if (hours < 24) {
            return `–±—ã–ª ${hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`;
        } else if (days === 1) {
            return '–±—ã–ª –≤—á–µ—Ä–∞';
        } else {
            return `–±—ã–ª ${days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
        }
    }
}

