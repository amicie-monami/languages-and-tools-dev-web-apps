// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ProfileRenderer —Å API
class ProfileRenderer {
    constructor(apiService) {
        this.apiService = apiService;
    }

    render(userData, container, isOwnProfile) {
        this.fillMainSection(userData, container);
        this.fillBiographySection(userData, container);
        this.fillContactInfoSection(userData, container);
        
        if (isOwnProfile) {
            this.addEditButton(container);
            this.addLogoutButton(container); 
        } else {
            this.addUserActions(userData, container);
        }
    }

    addEditButton(container) {
        const headerActions = container.querySelector('.header-actions');
        if (headerActions) {
            const editButton = document.createElement('button');
            editButton.type = 'button';  // –í–ê–ñ–ù–û!
            editButton.className = 'edit-profile-button';
            editButton.innerHTML = '‚úèÔ∏è';
            editButton.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å';
            headerActions.appendChild(editButton);
        }
    }

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ProfileRenderer - –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
async addUserActions(userData, container) {
    const actionsSection = container.querySelector('.profile-actions');
    if (!actionsSection) return;

    actionsSection.innerHTML = `
        <button type="button" class="message-user-button">
            –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        </button>
        <button type="button" class="contact-action-button" id="contact-action-button">
            –ó–∞–≥—Ä—É–∑–∫–∞...
        </button>
    `;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    await this.updateContactButton(container, userData.id);
    
    actionsSection.style.display = 'block';

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫!
    this.attachActionButtonHandlers(container);
}

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
    attachActionButtonHandlers(container) {
        const messageButton = container.querySelector('.message-user-button');
        const contactButton = container.querySelector('#contact-action-button');

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (messageButton && this.boundMessageHandler) {
            messageButton.removeEventListener('click', this.boundMessageHandler);
        }
        if (contactButton && this.boundContactHandler) {
            contactButton.removeEventListener('click', this.boundContactHandler);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ bound —Ñ—É–Ω–∫—Ü–∏–∏
        this.boundMessageHandler = (e) => {
            console.log('Profile: message button clicked');
            e.preventDefault(); 
            e.stopPropagation(); 
            // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ Profile –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if (this.onMessageClick) {
                this.onMessageClick(e);
            }
        };

        this.boundContactHandler = (e) => {
            console.log('Profile: contact action clicked');
            e.preventDefault();
            e.stopPropagation();
            // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ Profile –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            if (this.onContactAction) {
                this.onContactAction(e);
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if (messageButton) {
            messageButton.addEventListener('click', this.boundMessageHandler);
        }
        if (contactButton) {
            contactButton.addEventListener('click', this.boundContactHandler);
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ callback'–æ–≤
    setMessageClickHandler(handler) {
        this.onMessageClick = handler;
    }

    setContactActionHandler(handler) {
        this.onContactAction = handler;
    }

    addLogoutButton(container) {
        const headerActions = container.querySelector('.header-actions');
        if (headerActions) {
            const logoutButton = document.createElement('button');
            logoutButton.type = 'button';  // –í–ê–ñ–ù–û!
            logoutButton.className = 'logout-button';
            logoutButton.innerHTML = 'üö™';
            logoutButton.title = '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞';
            
            logoutButton.addEventListener('click', () => {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º AuthGuard –¥–ª—è –≤—ã—Ö–æ–¥–∞
                window.authGuard.logout();
            });
            
            headerActions.appendChild(logoutButton);
        }
    }
  
    renderActionButtons(container, isOwnProfile) {
        const actionsContainer = container.querySelector('.profile-actions');
    
        if (isOwnProfile) {
            if (actionsContainer) {
                actionsContainer.style.display = 'none';
            }
            
            const headerActions = container.querySelector('.header-actions');
            if (headerActions) {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º type="button"!
                headerActions.innerHTML = `
                    <button type="button" class="edit-profile-button" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å">‚öôÔ∏è</button>
                `;
            }
        } else {
            if (actionsContainer) {
                actionsContainer.style.display = 'block';
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º type="button" –∫ –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–µ!
                actionsContainer.innerHTML = `
                    <button type="button" class="message-user-button">–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</button>
                    <button type="button" class="contact-action-button" id="contact-action-button">
                        –ü—Ä–æ–≤–µ—Ä—è–µ–º...
                    </button>
                `;
            }

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
            this.updateContactButton(container, this.currentUserId);
        }
    }

    fillMainSection(userData, container) {
        const avatar = container.querySelector('.profile-avatar');
        const name = container.querySelector('.profile-name');
        const username = container.querySelector('.username');
        const status = container.querySelector('.status');
        
        if (avatar) avatar.src = userData.avatarUrl || 'assets/placeholder.png';
        if (name) name.textContent = userData.name;
        if (username) username.textContent = `@${userData.username}`;
        if (status) status.textContent = userData.isOnline ? '–í —Å–µ—Ç–∏' : '–ë—ã–ª –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ';
    }

    fillBiographySection(userData, container) {
        const biographySection = container.querySelector('.biography-section');
        const biography = container.querySelector('.profile-biography');
        
        if (userData.bio && userData.bio.trim()) {
            if (biography) biography.textContent = userData.bio;
            if (biographySection) biographySection.style.display = 'block';
        } else {
            if (biographySection) biographySection.style.display = 'none';
        }
    }

    fillContactInfoSection(userData, container) {
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
    }

    async updateContactButton(container, userId) {
        const contactButton = container.querySelector('#contact-action-button');
        if (!contactButton) {
            console.log('Contact button not found');
            return;
        }

        console.log('Checking contact status for user:', userId);
        contactButton.disabled = true;
        contactButton.textContent = '–ü—Ä–æ–≤–µ—Ä—è–µ–º...';

        try {
            const isContact = await this.apiService.isContact(userId);
            console.log(`User ${userId} is contact:`, isContact);
            
            contactButton.disabled = false;
            
            if (isContact) {
                contactButton.textContent = '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤';
                contactButton.className = 'contact-action-button remove-contact';
            } else {
                contactButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã';
                contactButton.className = 'contact-action-button add-contact';
            }
        } catch (error) {
            console.error('Error checking contact status:', error);
            contactButton.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏';
            contactButton.disabled = true;
            
            // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
            setTimeout(() => {
                if (contactButton.textContent === '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏') {
                    this.updateContactButton(container, userId);
                }
            }, 3000);
        }
    }

    toggleContactsVisibility(container, isOwnProfile) {
        const contactsSection = container.querySelector('.contacts-list-section');
        if (contactsSection) {
            contactsSection.style.display = isOwnProfile ? 'block' : 'none';
        }
    }

    formatLastSeen(lastSeen) {
        if (!lastSeen) return '–±—ã–ª –≤ —Å–µ—Ç–∏ –¥–∞–≤–Ω–æ';
        
        const now = new Date();
        const diff = now - new Date(lastSeen);
        const minutes = Math.floor(diff / (1000 * 60));
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));

        if (minutes < 60) {
            return `–±—ã–ª ${minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`;
        } else if (hours < 24) {
            return `–±—ã–ª ${hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥`;
        } else if (days === 1) {
            return '–±—ã–ª –≤—á–µ—Ä–∞';
        } else {
            return `–±—ã–ª ${days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
        }
    }
}