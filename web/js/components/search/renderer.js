class SearchRenderer {
    constructor(userService) {
        this.userService = userService;
    }

    renderResults(results, container, isLoading = false, query = '') {
        const resultsContainer = container.querySelector('.search-results');
        if (!resultsContainer) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç .search-results –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (isLoading) {
            resultsContainer.innerHTML = this.renderLoadingState();
            return;
        }

        if (query === '') {
            resultsContainer.innerHTML = this.renderEmptyState();
            return;
        }

        if (results.length === 0) {
            resultsContainer.innerHTML = this.renderNoResults(query);
            return;
        }

        resultsContainer.innerHTML = '';

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const header = this.createResultsHeader(results.length, query);
        resultsContainer.appendChild(header);

        // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results.forEach((user, index) => {
            const userItem = this.createUserItem(user, index);
            resultsContainer.appendChild(userItem);
        });
    }

    createResultsHeader(count, query) {
        const header = document.createElement('div');
        header.className = 'search-results-header';
        header.innerHTML = `
            <h3>–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${count}</h3>
            <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}"</p>
        `;
        header.style.cssText = `
            padding: 16px 0 8px 0;
            border-bottom: 1px solid #333;
            margin-bottom: 8px;
            color: #888;
        `;
        return header;
    }

    createUserItem(user, index) {
        const div = document.createElement('div');
        div.className = 'search-result-item';
        div.dataset.userId = user.id;
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ UserService
        const isOnline = this.userService.getUserStatus(user.id);
        const onlineStatus = isOnline ? '<span class="online-indicator"></span>' : '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
        div.style.animationDelay = `${index * 50}ms`;
        
        div.innerHTML = `
            <div class="user-avatar">
                <img src="${user.avatarUrl}" alt="${user.name}">
                ${onlineStatus}
            </div>
            <div class="user-info">
                <div class="user-name">${this.highlightMatch(user.name, '')}</div>
                <div class="user-username">@${this.highlightMatch(user.username, '')}</div>
                ${user.bio ? `<div class="user-bio">${this.truncateText(user.bio, 60)}</div>` : ''}
            </div>
            <div class="user-actions">
                <div class="user-status ${isOnline ? 'online' : 'offline'}">
                    ${isOnline ? '–í —Å–µ—Ç–∏' : '–û—Ñ–ª–∞–π–Ω'}
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
        div.style.cssText += `
            opacity: 0;
            transform: translateY(10px);
            animation: slideInUp 0.3s ease-out forwards;
        `;
        
        return div;
    }

    highlightMatch(text, query) {
        if (!query) return text;
        
        const regex = new RegExp(`(${query})`, 'gi');
        return text.replace(regex, '<mark>$1</mark>');
    }

    truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }

    renderLoadingState() {
        return `
            <div class="search-loading">
                <div class="loading-spinner"></div>
                <p>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
            </div>
        `;
    }

    renderEmptyState() {
        return `
            <div class="search-empty">
                <div class="empty-icon">üîç</div>
                <h3>–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫</h3>
                <p>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>
                <div class="search-tips">
                    <h4>–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É:</h4>
                    <ul>
                        <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ username</li>
                        <li>–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏</li>
                        <li>–ü–æ–∏—Å–∫ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É</li>
                    </ul>
                </div>
            </div>
        `;
    }

    renderNoResults(query) {
        return `
            <div class="search-no-results">
                <div class="empty-icon">üòî</div>
                <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "<strong>${query}</strong>" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                <div class="search-suggestions">
                    <h4>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</h4>
                    <ul>
                        <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è</li>
                        <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å</li>
                        <li>–ü–æ–∏—Å–∫ –ø–æ username —Å —Å–∏–º–≤–æ–ª–æ–º @</li>
                    </ul>
                </div>
            </div>
        `;
    }
}